import type { NextPage } from "next";
import Head from "next/head";
import { useState, useEffect } from "react";
import * as tf from "@tensorflow/tfjs";
import "@tensorflow/tfjs-core";
import * as speechCommands from "@tensorflow-models/speech-commands";
import { getWord } from "../utils/getWord";

const Home: NextPage = () => {
  const [recognizer, setRecognizer] =
    useState<speechCommands.SpeechCommandRecognizer | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [currentWord, setCurrentWord] = useState<number | null>(null);

  useEffect(() => {
    async function loadRecognizer() {
      setLoading(true);
      await tf.getBackend();
      const rec = await speechCommands.create("BROWSER_FFT");
      await rec.ensureModelLoaded();
      setRecognizer(rec);
      setLoading(false);
    }
    loadRecognizer();
  }, []);

  const listen = async () => {
    if (recognizer)
      await recognizer.listen(
        async (result) => {
          setCurrentWord(getWord(Array.from(result.scores as Float32Array)).index);
        },
        { includeSpectrogram: true, probabilityThreshold: 0.7 }
      );
  };

  const stopListening = () => {
    if (recognizer) recognizer.stopListening();
  };

  if (!recognizer) return <div>LOADING</div>;

  if (loading) return <div>LOADING</div>;

  return (
    <div className="bg-green-500 p-6 w-full">
      <Head>
        <title>Snek</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <button onClick={() => listen()} className="mr-8">Listen</button>
      <button onClick={() => stopListening()}>Stop listening</button>
      <div>current word:{currentWord}</div>
    </div>
  );
};

export default Home;
